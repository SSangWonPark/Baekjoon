#define _CRT_SECURE_NO_WARNINGS
 
#include <stdio.h>
#include <string.h>

// 이 코드는 인터넷에서 찾은 코드. (정답코드)
// 의문은 내 코드와 거의 동일함.
// 메모리와 관련있나..?
// 추가로 scanf를  scanf(" %c%d%d", &ch, &x, &y);
//로 쓰니 맞은 걸보면 앞에 공백으로 처리해서 된듯?
#if 0
int main(void)
{
    char arr[200001]; //문자열을 담을 배열
    scanf("%s", arr); //문자열 입력
    int len = strlen(arr); //입력받은 문자열의 길이
    int a[27][len]; //알파벳은 26개다.  2차원 배열 선언

    for (int i = 0; i < len; i++) //문자열에 무슨 알파벳이 있는지, 한칸 한칸 이동하면서 구하기
    {
        for (int j = 0; j < 27; j++) a[j][i] = 0; // 이차원 배열 a의 모든값을 0으로 초기화
        int tmp = arr[i] - 97; //a ASCII : 97(d) //특정 문자가 있으면
        a[tmp][i]++; //a[특정문자][그 때의 문자열의 길이]을 1 증가 시킨다.
    }

    for (int i = 1; i < len; i++) //이차원 배열 a의 알파벳에 따른 부분합들 구하기
    {
        for (int j = 0; j < 26; j++) //a~z
        {
            a[j][i] += a[j][i - 1];
        }
    }


    int q = 0;
    scanf("%d", &q); //몇 번?

    while (q > 0)
    {
        char ch = 0; //무슨 문자?
        int x, y; //범위
        scanf(" %c%d%d", &ch, &x, &y); //입력받음
        if (x == 0) printf("%d\n", a[ch - 97][y]); //x가 0이면 y의 부분합만 출력하면 됨
        else printf("%d\n", a[ch - 97][y] - a[ch - 97][x - 1]); //부분합끼리 빼면, 범위 내 합을 알 수 있음
        q--;
    }

    return 0; //main 함수 종료
}
#endif

#if 0
int dp[26][200001];
char string[200001];

int main()
{
    int n = 0;
    int l = 0;
    int r = 0;
    char c = 0;

    scanf("%s", string);
    scanf("%d", &n);

    for (int i = 0; i < strlen(string); i++)
    {
        dp[string[i] - 'a'][i]++;
    }

    for (int i = 1; i < strlen(string); i++)
    {
        for (int j = 0; j < 26; j++)
        {
            dp[j][i] = dp[j][i] + dp[j][i - 1];
        }
    }

    for (int i = 0; i < n; i++)
    {
        scanf("%c %c %d %d", &c, &c, &l, &r);

        printf("%d\n", dp[c - 'a'][r] - dp[c - 'a'][l - 1]);
    }

    return 0;
}
#endif

// dp[26][200001]으로 문자열을 알파벳 수만큼 생성.
// dp[i]마다 알파벳으로 구분해 각 알파벳이 있으면 +1.
// 누적합을 구하고, dp[c - 'a'][r] - dp[c - 'a'][l - 1]으로 해결.

// 이것도 50점짜리...


#if 0
int dp[200001][26];
char string[200001];

int main()
{
    int n = 0;
    int l = 0;
    int r = 0;
    char c = 0;

    scanf("%s", string);
    scanf("%d", &n);

    for (int i = 0; i < strlen(string); i++)
    {
        dp[i + 1][string[i] - 'a'] = 1;
    }

    for (int i = 0; i < strlen(string); i++)
    {
        for (int j = 0; j < 26; j++) 
        {
            dp[i + 2][j] = dp[i + 2][j] + dp[i + 1][j];
        }
    }

    for (int i = 0; i < n; i++)
    {
        scanf("%c %c %d %d", &c, &c, &l, &r);

        printf("%d\n", dp[r + 1][c - 'a'] - dp[l][c - 'a']);
    }

    return 0;
}
#endif

// 누적합을 이용하기 위해 dp[2001][26]을 생성.
// 문자열의 각 자리별로 알파벳으로 저장.
// 최종적으로 dp[r + 1][c - 'a'] - dp[l][c - 'a']로 해결.
// 
// 이것도 50점짜리 해답. 왜 50점이지...
// %c 가 문제인 것 같다. 왜인지 모르겠지만 줄바꿈같은 걸로 받는 듯?
// scanf 두번 쓰는 것말고 %c 두번으로 입력이 되긴하지만 이유를 모르겠다.

#if 0
int alpha[26];
char string[2001];

void reset(int alpha[]) {
    for (int i = 0; i < 26; i++)
    {
        alpha[i] = 0;
    }
}

int main()
{
    int n = 0;
    int l = 0;
    int r = 0;
    char c = 0;

    scanf("%s", string);
    scanf("%d", &n);

    for (int i = 0; i < n; i++)
    {
        scanf("%c %d %d", &c, &l, &r);
        scanf("%c %d %d", &c, &l, &r);

        for (int j = l; j <= r; j++)
        {
            alpha[string[j] - 'a']++;
        }

        printf("%d\n", alpha[c - 'a']);

        reset(alpha);
    }

    return 0;
}
#endif

// 왜 scanf를 두번하니까 될까?
// 조사식을 봐도 처음 scanf에 입력을 할때 안들어가고,
// 두번째에 이미 입력한 값이 들어감. 다시 입력 받지는 않음.
// 부분 성공함. 50점
// 시간초과인듯..?

// 아래 코드는 위와 동일하지만 scanf가 하나.

#if 0
int alpha[26];
char string[2001];

void reset(int alpha[]) {
    for (int i = 0; i < 26; i++)
    {
        alpha[i] = 0;
    }
}

int main()
{
    int n = 0;
    int l = 0;
    int r = 0;
    char c = 0;

    scanf("%s", string);
    scanf("%d", &n);

    for (int i = 0; i < n; i++)
    {
        scanf("%c %d %d", &c, &l, &r);

        for (int j = l; j <= r; j++)
        {
            alpha[string[j] - 'a']++;
        }

        printf("%d\n", alpha[c - 'a']);

        reset(alpha);
    }

    return 0;
}
#endif

// 문자열 l부터 r까지 배열을 돌면서 alpha에 저장.
// alpha[c - 'a']로 몇인지 출력.
// 이후 alpha를 초기화.
