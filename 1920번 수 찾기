#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <iostream>
#include <algorithm>
using namespace std;

int arrn[100001];
int arrm[100001];

int binary_search(int start, int end, int target)
{
	int mid = 0;
	int result = 0;

	while (start <= end) {
		mid = (start + end) / 2;
		if (arrn[mid] == target) return 1;
		else if (arrn[mid] > target) end = mid - 1;
		else if (arrn[mid] < target) start = mid + 1;
	}

	return result;
}

int main()
{
	int n, m, temp = 0;
	int result = 0;

	cin >> n;
	for (int i = 0; i < n; i++) {
		scanf("%d", &arrn[i]);
	}
	
	sort(arrn, arrn + n);

	cin >> m;
	for (int i = 0; i < m; i++) {
		scanf("%d", &arrm[i]);
	}

	for (int i = 0; i < m; i++) {
		result = binary_search(0, n - 1, arrm[i]);
		printf("%d\n", result);
	}

	return 0;
}

// 정렬과 이진탐색이 핵심
// 귀찮아서 그냥 sort함수를 사용함
// c였다면 qsort를 썼어야함.
// 이진탐색을 대충 알고 있어서 다시 봐야했음
// 이진탐색을 확실하게 알아두자. 빠르다.


// 아래는 실패 코드
// 아무 생각 없이 배열에 숫자를 받아서 그 배열을 증가시켜서 확인하려함.
// 범위가 너무 커서 안된다는걸 늦게 알음.

#if 0
#include <stdio.h>

int arr[100001];

int main() {

	int n = 0;
	int m = 0;
	int num = 0;

	scanf("%d", &n);

	for (int i = 0; i < n; i++)
	{
		scanf("%d", &num);
		arr[num]++;
	}

	scanf("%d", &m);

	for (int i = 0; i < m; i++)
	{
		scanf("%d", &num);
		printf("%d\n", arr[num]);
	}

	return 0;
}
#endif
